name: Build and Push Image to ECR

permissions:
  id-token: write
  contents: read

on:
  push:
    branches:
      - main
      - queue

env:
  AWS_REGION: eu-central-1

jobs:
  Build_and_Push_to_ECR:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      -
        name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      -
        name: Build, tag, and push the Front-End Docker Image to Amazon ECR
        id: Build-Image-FrontEnd
        env:
          IMAGE: ./FrontEnd
          REGISTRY: ${{ steps.logic-ecr-outputs.registry }}
          REPOSITORY: ${{ secrets.AWS_ECR_REGISTRY }}
          IMAGE_TAG: frontend-latest
        run: |
          docker build -t ${{ secrets.AWS_ECR_REGISTRY }}:$IMAGE_TAG $IMAGE
          docker push ${{ secrets.AWS_ECR_REGISTRY }}:$IMAGE_TAG
      -
        name: Build, tag, and push the Back-End Docker Image to Amazon ECR, then delete all untagged images
        id: Build-Image-BackEnd
        env:
          IMAGE: ./BackEnd
          REGISTRY: ${{ steps.logic-ecr-outputs.registry }}
          REPOSITORY: ${{ secrets.AWS_ECR_REGISTRY }}
          IMAGE_TAG: backend-latest
        run: |
          docker build -t ${{ secrets.AWS_ECR_REGISTRY }}:$IMAGE_TAG $IMAGE
          docker push ${{ secrets.AWS_ECR_REGISTRY }}:$IMAGE_TAG
          IMAGES_TO_DELETE=$( aws ecr list-images --region ${{ env.AWS_REGION }} --repository-name buck-cat --filter "tagStatus=UNTAGGED" --query 'imageIds[]' --output json )
          aws ecr batch-delete-image --region ${{ env.AWS_REGION }} --repository-name buck-cat --image-ids "$IMAGES_TO_DELETE" || true